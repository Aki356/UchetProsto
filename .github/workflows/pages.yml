name: Build PHP to static and deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  # Имя репозитория для базового префикса: /<repo>/
  REPO_SLUG: ${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Show repo tree (debug)
        run: |
          echo "== top level =="
          ls -la
          echo "== dirs (depth<=3) =="
          find . -maxdepth 3 -type d | sort

      - name: Render PHP -> static HTML (auto-detect public dirs)
        shell: bash
        run: |
          set -euo pipefail
          rm -rf dist && mkdir -p dist

          # Найдём ВСЕ каталоги 'public' (кроме служебных)
          mapfile -t PUB_DIRS < <(find . -type d -name public \
            -not -path '*/.git/*' -not -path '*/.github/*' -not -path '*/vendor/*' \
            -not -path '*/node_modules/*' | sort)

          render_dir () {
            local SRC_DIR="$1"    # например: public  или firstPart/public
            local PARENT="${SRC_DIR#./}"
            PARENT="${PARENT%/public}"       # напр. "" или "firstPart" или "secondPart"
            local OUT_DIR="dist/${PARENT}"
            mkdir -p "$OUT_DIR"

            echo "::group::Render $SRC_DIR -> $OUT_DIR"

            # 1) Рендерим .php (кроме api.php) -> .html
            #    сохраняем структуру каталогов
            find "$SRC_DIR" -type f -name '*.php' ! -name 'api.php' -print0 | while IFS= read -r -d '' f; do
              out="$OUT_DIR/${f#$SRC_DIR/}"
              out="${out%.php}.html"
              mkdir -p "$(dirname "$out")"
              php "$f" > "$out"
              echo "render: $f -> $out"
            done

            # 2) Копируем статику
            rsync -a "$SRC_DIR"/ "$OUT_DIR"/ \
              --exclude '*.php' --exclude '.git' --exclude '.github' || true

            # 3) Проставим <base href> для GitHub Pages
            # base: /<repo>/ или /<repo>/<subdir>/
            if [ -z "$PARENT" ]; then
              BASE="/${REPO_SLUG}/"
            else
              BASE="/${REPO_SLUG}/${PARENT}/"
            fi
            find "$OUT_DIR" -type f -name '*.html' -print0 | while IFS= read -r -d '' file; do
              # Вставляем <base> сразу после первого <head ...>
              sed -i '0,/<head[^>]*>/s//&\
  <base href="'"$BASE"'">/' "$file"
            done

            echo "::endgroup::"
          }

          if [ "${#PUB_DIRS[@]}" -gt 0 ]; then
            for d in "${PUB_DIRS[@]}"; do
              render_dir "$d"
            done
          else
            echo "No 'public' directories found. Fallback: render root index.php if exists."
            if [ -f "index.php" ]; then
              php index.php > dist/index.html
              # базовый префикс для корня
              sed -i '0,/<head[^>]*>/s//&\
  <base href="\/'"$REPO_SLUG"'\/">/' dist/index.html || true
              # скопируем всю статику из корня, кроме .php и служебного
              rsync -a ./ dist/ --exclude '*.php' --exclude '.git' --exclude '.github' --exclude 'dist' || true
            else
              echo "No index.php at root. Nothing to deploy." >&2
              exit 1
            fi
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
