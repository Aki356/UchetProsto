name: Build PHP to static and deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

env:
  REPO_SLUG: ${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Render PHP -> static HTML (auto-detect)
        shell: bash
        run: |
          set -euo pipefail
          rm -rf dist && mkdir -p dist

          mapfile -t PUB_DIRS < <(find . -type d -name public \
            -not -path '*/.git/*' -not -path '*/.github/*' \
            -not -path '*/vendor/*' -not -path '*/node_modules/*' | sort)

          insert_base () {
            local file="$1" base="$2"
            awk -v B="$base" 'BEGIN{d=0} /<head[^>]*>/ && !d {print; print "  <base href=\"" B "\">"; d=1; next} {print}' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          }

          render_dir () {
            local SRC_DIR="$1"
            local PARENT="${SRC_DIR#./}"; PARENT="${PARENT%/public}"
            local OUT_DIR="dist/${PARENT}"
            mkdir -p "$OUT_DIR"

            # PHP -> HTML
            find "$SRC_DIR" -type f -name '*.php' ! -name 'api.php' -print0 | while IFS= read -r -d '' f; do
              out="$OUT_DIR/${f#$SRC_DIR/}"; out="${out%.php}.html"
              mkdir -p "$(dirname "$out")"
              php "$f" > "$out"
            done

            # статика
            rsync -a "$SRC_DIR"/ "$OUT_DIR"/ --exclude '*.php' --exclude '.git' --exclude '.github' || true

            # <base>
            if [ -z "$PARENT" ]; then BASE="/${REPO_SLUG}/"; else BASE="/${REPO_SLUG}/${PARENT}/"; fi
            find "$OUT_DIR" -type f -name '*.html' -print0 | while IFS= read -r -d '' h; do
              insert_base "$h" "$BASE"
            done
          }

          # соберём все public/
          if [ "${#PUB_DIRS[@]}" -gt 0 ]; then
            for d in "${PUB_DIRS[@]}"; do
              render_dir "$d"
            done
          fi

          # 1) если есть твой корневой index.html — публикуем его
          if [ -f index.html ]; then
            cp index.html dist/index.html
            if ! grep -qi '<base[^>]*href=' dist/index.html; then
              insert_base dist/index.html "/${REPO_SLUG}/"
            fi
          fi

          # 2) если до сих пор нет dist/index.html — создаём "меню"
          if [ ! -f dist/index.html ]; then
            {
              printf '%s' '<!doctype html><html lang="ru"><head><meta charset="utf-8"><title>'
              printf '%s' "${REPO_SLUG}"
              printf '%s' '</title><base href="/'"${REPO_SLUG}"'/"><meta name="viewport" content="width=device-width,initial-scale=1"><style>body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Helvetica,Arial,sans-serif;max-width:840px;margin:40px auto;padding:0 16px}h1{font-size:22px}ul{line-height:1.8}</style></head><body><h1>Разделы проекта</h1><ul>'
              for d in "${PUB_DIRS[@]}"; do
                P="${d#./}"; P="${P%/public}"
                if [ -z "$P" ]; then
                  printf '  <li><a href="/%s/">Главная</a></li>' "${REPO_SLUG}"
                else
                  printf '  <li><a href="/%s/%s/">%s/</a></li>' "${REPO_SLUG}" "$P" "$P"
                fi
              done
              printf '%s' '</ul></body></html>'
            } > dist/index.html
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
